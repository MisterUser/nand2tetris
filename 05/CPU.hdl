// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
                            // 15: 0
                            // 14-13: XX
                            // 12: a  -> chooses A or M 
                            // 11-6: c1-c6
                            // 5-3: d1-d3
                            // 2-0: j1-j3
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=aINSTR);
    
    Or(a=aINSTR, b=instruction[5], out=cA);
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=outMuxA);
    ARegister(in=outMuxA, load=cA, out=outA);

    And (a=instruction[4], b=instruction[15], out=writeD);  //if C instruction and d2 bit set
    DRegister(in=outALU, load=writeD, out=outD);
    Mux16(a=outA, b=inM, sel=instruction[12], out=outAM);
    ALU(x=outD, y=outAM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, zr=cZR, ng=cNG);

    And (a=instruction[3], b=instruction[15], out=writeM);  //if C instruction and d3 bit set
    Rem16(in=outA, out=addressM);
    And16(a=outALU, b=true, out=outM);

    And(a=cNG, b=instruction[2], out=andZR);
    And(a=cZR, b=instruction[1], out=andNEG);
    Or(a=cNG, b=cZR, out=ngORzr);
    Not(in=ngORzr, out=cPOS);
    And(a=cPOS, b=instruction[0], out=andPOS);
    Or(a=andZR, b=andNEG, out=lteq);
    Or(a=lteq, b=andPOS, out=ltOReqORgt);
    And(a=instruction[15], b=ltOReqORgt, out=cJMP);

    PC(in=outA, load=cJMP, inc=true, reset=reset, out=outPC);
    Rem16(in=outPC, out=pc);
}
